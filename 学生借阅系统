#include<iostream>
#include<cstdlib>
#include<windows.h>
#include<string>
#include<cstring>
#include<iomanip>
using namespace std;

//函数声明区
bool searchid(const char* id);
bool searchaccount(const char* account);
bool passwordcompare(const char* account, const char* password);
void welcomelayout(string name);
void rollincontrol(int num);
void rollinlayout();
void denglulayout();
void rollinlayoutalready();
void zhucepasswordon();
void zhucelayout();
void mainlayout(const char* account, const int i);
int index(const char* account);
void firstdenglu(const char* account, const int i);
void findpassword(const char* account, const int i);
void mainlayoutcontrol(int num, const char* account, const int i);
void librarygo(const char* account, const int i);
void libraryout(const char* account, const int i);
void mainlayout();
void mainlayoutcontrol(const int num);

//此处为全局变量区域，不可随意变动!!!
int width;//控制台宽度
string name;
int studatai = 0;//注册学生信息序号
int booknum = 0;//添加新书序号
bool finalnum = false;//判断是否以账号登录，开启对应借书权限（排除以安全模式进入系统导致系统错误借书）
bool ff = true;//判断是否为第一次打开系统，第一次需要获取控制台宽度

int widthlong() //windows系统控制台列数获取以便居中
{
	HANDLE hStdout = GetStdHandle(STD_OUTPUT_HANDLE);
	if (hStdout == INVALID_HANDLE_VALUE) {
		printf("Failed to get stdout handle\n");
		return 1;
	}

	CONSOLE_SCREEN_BUFFER_INFO csbi;
	if (!GetConsoleScreenBufferInfo(hStdout, &csbi)) {
		printf("Failed to get console info\n");
		return 1;
	}

	int consoleWidth = csbi.srWindow.Right - csbi.srWindow.Left + 1;
	width = consoleWidth;
	return 0;
}

typedef struct book//书籍结构体
{
	char bookISNnumber[13];
	string title;
	string writer;
	string pricing;
	string publishinghouse;
	bool condiction = false;
}book;
book bookdata[100];
typedef struct bbook{
	int bookindex;
	struct bbook *next;
}bookstu,*bookstulink;
typedef struct //成绩结构体
{
	int math;
	int english;
	int datacontrol;
}grade;
typedef struct student//学生基本信息结构体
{
	string name;
	int age;
	string clas;
	string profession;
	char phonenumber[12];
	char account[10];
	char password[18];
	bookstulink bookstu;
	int bookstulinkk = 0;
	grade grade[3];
	bool exist = false;
	
	student() {
		phonenumber[0] = 0;
	  }
}stu;
stu studentdata[100];

void mid(const char* text, int width)//控制台居中设置函数
{
	size_t textlength = strlen(text);
	size_t blank = (width - textlength) / 2;
	for (int i = 0;i < blank;i++)
		cout << " ";
	cout << text << endl;
}

//安全模式下图书馆剩余书籍信息
void anybook()
{
	for (int i = 0;i < booknum;i++)
	{
		string tf;
		if (bookdata[i].condiction == false) tf = "未借阅";
		else tf = "已借阅";
		cout << endl << left <<i+1<<" "<< setw(25) << bookdata[i].title << setw(20) << bookdata[i].writer
			<< setw(10) << bookdata[i].pricing << setw(15) << bookdata[i].bookISNnumber <<
			setw(20) << bookdata[i].publishinghouse << setw(4) << tf << right << endl;
	}
}
////图书馆剩余书籍信息
void anybook(const char *account,const int i)
{
	for (int i = 0;i < booknum;i++)
	{
		string tf;
		if (bookdata[i].condiction == false) tf = "未借阅";
		else tf = "已借阅";
		cout << endl << left << i + 1 << " " << setw(25) << bookdata[i].title << setw(20) << bookdata[i].writer
			<< setw(10) << bookdata[i].pricing << setw(15) << bookdata[i].bookISNnumber <<
			setw(20) << bookdata[i].publishinghouse << setw(4) << tf << right << endl;
	}
}
//成绩提交模块
void gradesubmit(const char *account, const int i)
{
	mid("请输入你的高数成绩", width);
	cin >> studentdata[i].grade->math;
	cout << endl;
	mid("请输入你的大英成绩", width);
	cin >> studentdata[i].grade->english;
	cout << endl;
	mid("请输入你的数据结构成绩", width);
	cin >> studentdata[i].grade->datacontrol;
	cout << endl;
	mid("你的成绩提交完成，将有校方审核，按任意键返回上一级", width);
	cin.get();
	system("cls");
	mainlayout(account, i);
}
//个人信息补全模块
void information(const char* account, const int i)
{
	mid("由于登陆时已确认你的姓名，这里将会为你自动填写", width);
	mid("1-最开始填写不对，需要修改", width);
	mid("2-最开始填写正确，下一步", width);
	int num;
	cin >> num;
	if (num == 1)
	{
		mid("你的姓名是", width);
		cin >> studentdata[i].name;
		cout << endl;
	}
		mid("你的年龄", width);
		cin >> studentdata[i].age;
		cout << endl;
		mid("你的班级", width);
		cin >> studentdata[i].clas;
		cout << endl;
		mid("你的专业", width);
		cin >> studentdata[i].profession;
		cout << endl;
		mid("恭喜你，你的信息已经全部补全，按任意键返回上一级", width);
		cin.ignore();
		cin.get();
		system("cls");
		mainlayout(account, i);
}
void seeinformation(const char* account, const int i)
{
	cout << endl << left << setw(6) << studentdata[i].name << setw(3) << studentdata[i].age
		<< setw(15) << studentdata[i].clas << setw(15) << studentdata[i].profession <<
		setw(15) << studentdata[i].phonenumber << setw(12) << studentdata[i].account <<setw(15)<< studentdata[i].grade << right << endl;
	mid("以上为你的个人信息，按任意键返回上一级", width);
	cin.ignore();
	cin.get();
	system("cls");
	mainlayout(account, i);
}

//通过isn查找图书
int searchbookbyisn(const char* isn)
{
	for (int i = 0;i < 100;i++)
	{
		if (strcmp(bookdata[i].bookISNnumber, isn) == 0)
		{
			return i;
		}
	}
	return -1;
}

//与已填写数据比对函数
bool searchid(const char* id)//账号id存在性
{
	for (int i = 0; i < 100; i++) {
		if (studentdata[i].exist && strcmp(studentdata[i].account, id) == 0) {
			return true; // 找到重复id
		}
	}
	return false; // 没有重复id
}
bool searchaccount(const char* account)//账号存在性
{
	for (int i = 0; i < 100; i++) {
		if (studentdata[i].exist && strcmp(studentdata[i].account, account) == 0) {
			return true; // 找到重复id
		}
	}
	return false; // 没有重复id
}
bool passwordcompare(const char* account, const char* password)//账号密码正确性
{
	for (int i = 0; i < 100; i++) {
		if (studentdata[i].exist && strcmp(studentdata[i].account, account) == 0) {
			// 找到账号后再比对密码
			if (strcmp(studentdata[i].password, password) == 0) {
				return true; // 密码正确
			}
			else {
				return false; // 密码错误
			}
		}
	}
	return false; // 没有找到账号
}

//欢迎界面以及电脑配置询问及其登陆界面
void welcomelayout(string name)//欢迎界面
{
	cout << "welcome " << name << endl;
	cout << "Enter any character to continue";
	if (cin.get())  system("cls");
}
void rollincontrol(int num)
{
	switch (num)
	{
	case 1:denglulayout();break;
	case 2:zhucelayout();break;
	case 3:mainlayout();break;
	case 0: {
		cout << "感谢你的使用,输入任意字符退出";
		if (cin.get())  exit(0);
	}break;
	}
}//初始界面控制函数
void rollinlayout()//获取电脑信息后的初始界面
{
	if (ff)
	{
		cout << "你的电脑操作系统为？1-windows 2-其它(如macos，linux等)" << endl;
		int systemnum;
		cin >> systemnum;
		int errornum;
		switch (systemnum)
		{
		case 1:
		{
			errornum = widthlong();
			if (errornum == 0) break;
		}
		case 2:
		{
			cout << "你的控制台宽度?(将影响整体视觉，请认真填写)" << endl;
			cin >> width;
			cout << "以上内容将被清屏，输入任意字符以继续";
			cout << endl;
			if (cin.get())  system("cls");
		};break;
		default:
		{
			cout << "你的控制台宽度?(将影响整体视觉，请认真填写)" << endl;
			cin >> width;
			cout << "以上内容将被清屏，输入任意字符以继续";
			cout << endl;
			if (cin.get())  system("cls");
		};break;//default防止用户输入错误导致程序错误
		}
		system("cls");
		ff = false;
	}
	mid("欢迎使用学生管理系统", width);
	mid("账号只能由1-10位字母和数字组成", width);
	mid("密码只能由9-18位字母、数字或部分符号组成", width);
	mid("欢迎使用学生管理系统，请先登录", width);
	mid("--------------------------------------", width);
	cout << endl;
	mid("菜单", width);
	mid("1-登录", width);
	mid("2-注册", width);
	mid("3-安全模式查询", width);
	mid("0-退出", width);
	cout << endl;
	mid("--------------------------------------", width);
	mid("输入数字以继续", width);
	int controlnum;
	cin >> controlnum;
	rollincontrol(controlnum);
}

//登录
void denglulayout()//登陆界面
{
	system("cls");
	mid("欢迎登录学生管理系统", width);
	mid("请分别输入你的账号密码", width);
	mid("--------------------------------------", width);
	cout << endl;
	char account[11] = { 0 };  // 初始化清零
	char password[19] = { 0 }; // 初始化清零
	cin.ignore();
	// 账号输入部分
	while (true) {
		mid("账号:", width);
		cin.getline(account, 11);  // 直接读取到account，避免二次拷贝

		if (!searchaccount(account)) {
			mid("你还未注册账号，请先注册账号，按任意键返回主菜单", width);
			cout << endl;
			mid("--------------------------------------", width);
			cin.get();
			system("cls");
			rollinlayout();
			return;
		}
		break;
	}
	// 密码输入部分
	int attempts = 3;
	int i;
	while (attempts-- > 0) 
	{
		mid("密码:", width);
		cin.getline(password, 19);

		if (passwordcompare(account, password)) {
			mid("登录成功，按任意键进入主界面", width);
			cout << endl;
			mid("--------------------------------------", width);
			cin.get();
			system("cls");
			i = index(account);
			finalnum = true;
			if (studentdata[i].phonenumber[0] == '\0')  firstdenglu(account,i);
			else mainlayout(account,i);
			return;
		}
		cout << "密码错误！剩余尝试次数: " << to_string(attempts);
	}
	mid("登录失败次数过多，是否找回密码？", width);    mid("1-是", width);    mid("0-否", width);
	int j;  cin >> j;
	if (j) findpassword(account, index(account));
	else {
		mid("按任意键返回主菜单", width);
		cin.get();
		system("cls");
		rollinlayout();
	}
}
//找回密码模块
int index(const char* id)
{
	for (int i = 0; i < 100; i++) {
		if (studentdata[i].exist && strcmp(studentdata[i].account, id) == 0) {
			return i;
		}
	}
}
void firstdenglu(const char* account,const int i)
{
	mid("由于你是第一次登录，请输入你的电话号码以便于找回你的密码，11位电话号码（不包括+86）", width);
	int j;
	for (j = 0;j < 11;j++)
	{
		cin >> studentdata[i].phonenumber[j];
	}
	studentdata[i].phonenumber[j] = '\0';
	mid("电话号码信息已补全，按任意键跳转主界面", width);
	cin.get();    system("cls");
	mainlayout(account,i);
}
void findpassword(const char* account, const int i)
{
	mid("请输入你账号绑定的手机号", width);
	char phonenumber[12];
	cin.getline(phonenumber, 12);
	if (studentdata[i].phonenumber[0] == '\0')
	{
		mid("由于你的账号未绑定手机号，无法找回，你可以选择重新注册账号，按任意键返回主菜单", width);
		cin.get();
		system("cls");
		rollinlayout();
	}
	else if (strcmp(studentdata[i].phonenumber, phonenumber) == 0)
	{
		mid("手机号验证成功，请输入您的新密码", width);
		char password[19];
		bool isvalid = false;
		while (!isvalid)
		{
			mid("请输入你的账号密码(密码只能由9-18位字母、数字或部分符号组成，如果输入大于18位将自动截取前18位)", width);
			char password_[100];
			cin.getline(password_, 100);
			int jj;
			for (jj = 0;jj < 18;jj++)
			{
				if (password_[jj] != '\n') password[jj] = password_[jj];
				else break;
			}
			if (jj >= 10) password[18] = '\0';
			else password[jj] = '\0';
			if (strlen(password) < 9 || strlen(password) > 18 || strlen(password) == 0) {
				cout << "你未成功设置账号密码,错误代码:-1，请重新输入,本页面将清空，重新进入注册账号密码设置环节,输入任意字符继续";
				if (cin.get())  system("cls");
				continue;
			}
			else {
				for (int j = 0;j != jj;j++)
					studentdata[i].password[j] = password[j];
				cout << "恭喜你已成功设置你的账号密码，密码为" << studentdata[i].password << "请牢记你的密码，请输入任意字符以返回登录";
				if (cin.get()) system("cls");
				isvalid = true;
			}
		}
		rollinlayoutalready();
	}
	else
	{
		mid("手机号失败，错误代码:-3，输入号码不匹配，按任意键重新输入", width);
		cin.get();
		system("cls");
		findpassword(account, i);
	}
}

//欢迎界面后的主菜单界面
void rollinlayoutalready()
{
	mid("欢迎使用学生管理系统", width);
	mid("账号只能由1-10位字母和数字组成", width);
	mid("密码只能由9-18位字母、数字或部分符号组成", width);
	mid("欢迎使用学生管理系统，请先登录", width);
	mid("--------------------------------------", width);
	cout << endl;
	mid("菜单", width);
	mid("1-登录", width);
	mid("2-注册", width);
	mid("0-退出", width);
	cout << endl;
	mid("--------------------------------------", width);
	mid("输入数字以继续", width);
	int controlnum;
	cin >> controlnum;
	rollincontrol(controlnum);
}

//注册
void zhucepasswordon()//注册账号后密码的输入以及信息的完整性填写
{
	char password[19];
	int i;
	bool isvalid = false;
	while (!isvalid)
	{
		mid("请输入你的账号密码(密码只能由9-18位字母、数字或部分符号组成，如果输入大于18位将自动截取前18位)", width);
		char password_[100];
		cin.getline(password_, 100);
		for (i = 0;i < 18;i++)
		{
			if (password_[i] != '\n') password[i] = password_[i];
			else break;
		}
		if (i >= 10) password[18] = '\0';
		else password[i] = '\0';
		if (strlen(password) < 9 || strlen(password) > 18 || strlen(password) == 0) {
			cout << "你未成功设置账号密码,错误代码:-1，请重新输入,本页面将清空，重新进入注册账号密码设置环节,输入任意字符继续";
			if (cin.get())  system("cls");
			continue;
		}
		else {
			for (int j = 0;j != i;j++)
				studentdata[studatai].password[j] = password[j];
			studentdata[studatai].exist = true;
			cout << "恭喜你已成功设置你的账号密码，密码为" << studentdata[studatai].password << "请牢记你的密码，请输入任意字符以返回登录";
			if (studentdata[studatai].exist) studatai++;
			if (cin.get()) system("cls");
			isvalid = true;
		}
	}
	rollinlayoutalready();
}
void zhucelayout()//注册界面及注册账号代码输入
{
	char account[11];
	int i;
	bool isvalid = false;
	cin.ignore();
	while (!isvalid)
	{
		mid("欢迎注册学生管理系统账号", width);
		mid("输入你需要注册的账号名称(账号只能由1-10位字母和数字组成,如果输入大于10位将自动截取前10位)", width);
		char account_[100];
		cin.getline(account_, 100);
		for (i = 0;i < 10;i++)
		{
			if (account_[i] != '\n') account[i] = account_[i];
			else break;
		}
		if (i >= 10) account[10] = '\0';
		else account[i] = '\0';
		if (i == 0) {
			cout << "你未成功设置账号代码,错误代码:-1，请重新输入,本页面将清空，重新进入注册账号代码设置环节,输入任意字符继续";
			if (cin.get())  system("cls");
			continue;
		}
		else if (searchid(account))
		{
			cout << "你未成功设置账号代码,错误代码:-2，该用户名id已存在，请重新输入,本页面将清空，重新进入注册账号代码设置环节,输入任意字符继续";
			if (cin.get())  system("cls");
			continue;
		}
		else {
			for (int j = 0;j != i;j++)
			{
				studentdata[studatai].account[j] = account[j];
			}
			cout << "恭喜你已成功设置你的账号代码，代码为" << studentdata[studatai].account << "即将进入设置密码阶段,输入任意字符继续";
			if (cin.get()) { isvalid = true; }
		}
	}
	zhucepasswordon();
}

//主界面
void mainlayout(const char *account,const int i)
{
	system("cls");
	mid("欢迎进入学生管理系统主界面", width);
	mid("主菜单", width);
	mid("--------------------------------------", width);
	cout << endl;
	mid("1-图书借阅", width);
	mid("2-借阅图书归还", width);
	mid("3-图书馆图书借阅剩余", width);
	mid("4-期末考试成绩提交", width);
	mid("5-退出登录", width);
	mid("6-补充个人信息", width);
	mid("7-查看个人信息", width);
	cout << endl;
	mid("--------------------------------------", width);
	mid("请爱护图书馆书籍，借阅时注意自己的账号安全，解释权归系统管理者所有", width);
	mid("输入数字以继续", width);
	int controlnum;
	cin >> controlnum;
	mainlayoutcontrol(controlnum,account,i);
}
//安全模式主界面控制
void mainlayoutcontrol(const int num)
{
	switch (num)
	{
	case 1: { mid("你还未登录，只能进行借阅剩余查看操作", width);cin.get(); mainlayout(); }break;
	case 2: { mid("你还未登录，只能进行借阅剩余查看操作", width);cin.get(); mainlayout(); }break;
	case 3:anybook();break;
	case 4: { mid("你还未登录，只能进行借阅剩余查看操作", width);cin.get(); mainlayout(); }break;
	case 5: { mid("你还未登录，只能进行借阅剩余查看操作", width);cin.get(); mainlayout(); }break;
	case 6: { mid("你还未登录，只能进行借阅剩余查看操作", width);cin.get(); mainlayout(); }break;
	}
}
//安全模式主界面
void mainlayout()
{
	system("cls");
	mid("欢迎进入学生管理系统主界面", width);
	mid("主菜单", width);
	mid("--------------------------------------", width);
	cout << endl;
	mid("1-图书借阅", width);
	mid("2-借阅图书归还", width);
	mid("3-图书馆图书借阅剩余", width);
	mid("4-期末考试成绩提交", width);
	mid("5-退出登录", width);
	mid("6-补充个人信息", width);
	cout << endl;
	mid("--------------------------------------", width);
	mid("请爱护图书馆书籍，借阅时注意自己的账号安全，解释权归系统管理者所有", width);
	mid("输入数字以继续", width);
	int controlnum;
	cin >> controlnum;
	mainlayoutcontrol(controlnum);
}
//主界面控制
void mainlayoutcontrol(int num,const char *account,const int i)
{
	switch (num)
	{
	case 1:librarygo(account, i);break;
	case 2:libraryout(account, i);break;
	case 3:anybook(account,i);break;
	case 4:gradesubmit(account, i);break;
	case 5: { system("cls");finalnum = false;rollinlayout(); }break;
	case 6:information(account, i);break;
	case 7:seeinformation(account, i);break;
	}
}

//图书馆借阅还书模块
void newbook()
{
	system("cls");
	int i;
	do{
		mid("输入你想要创建图书的书名", width);
		cin >> bookdata[booknum].title;
		cout << bookdata[booknum].title;
		mid("输入你想要添加图书的作者", width);
		cin >> bookdata[booknum].writer;
		cout << bookdata[booknum].writer;
		mid("输入你想要添加图书的价格", width);
		cin >> bookdata[booknum].pricing;
		cout << bookdata[booknum].pricing;
		mid("请输入你想要添加图书的出版社信息", width);
		cin >> bookdata[booknum].publishinghouse;
		cout << bookdata[booknum].publishinghouse;
		mid("请输入你想要添加图书ISN编码(13位)", width);
		cin >> bookdata[booknum].bookISNnumber;
		cout << bookdata[booknum].bookISNnumber;
		booknum++;
		mid("是否继续添加图书", width);
		mid("1-是", width);
		mid("0-否", width);
		cin >> i;
	}while (i);
}
void librarygo(const char* account, const int i)
{
	system("cls");
	while (true) {  // 使用循环代替递归
		mid("--------------------------------------", width);
		cout << endl;
		mid("1-借书", width);
		mid("0-返回上一级", width);
		int choose;
		cin >> choose;
		if (choose == 1) {
			system("cls");
			anybook();
			mid("1-借阅已有信息的书籍", width);
			mid("2-上列表格中没有你想要的书籍？按2进入创建", width);
			cout << endl;
			mid("--------------------------------------", width);

			int inner_choose;  // 重命名避免冲突
			cin >> inner_choose;
			if (inner_choose == 1) {
				mid("输入你想借阅图书的ISN编号", width);
				char isn[14];
				for (int j = 0;j < 13;j++)
				{
					cin >> isn[j];
				}
				isn[13] = '\0';
				int b = searchbookbyisn(isn);
				if (b == -1) {
					cout << "图书不存在，按任意键返回";
					cin.ignore(); cin.get();
					continue;  // 返回当前菜单
				}
				else {
					// 创建新节点
					bookstulink newNode = new bookstu;
					newNode->bookindex = b;
					newNode->next = nullptr;

					// 链表操作修复
					if (studentdata[i].bookstu == nullptr) {
						studentdata[i].bookstu = newNode;
					}
					else {
						bookstulink p = studentdata[i].bookstu;
						// 正确遍历到末尾
						while (p->next != nullptr) {
							p = p->next;
						}
						p->next = newNode;  // 追加到末尾
					}
					studentdata[i].bookstulinkk++;
					bookdata[b].condiction = true;
					cout << "添加成功! 已借书籍: ";
					// 显示当前借阅列表
					bookstulink p = studentdata[i].bookstu;
					while (p != nullptr) {
						cout << bookdata[p->bookindex].title << " | ";
						p = p->next;
					}
					cout << "\n按任意键返回";
					cin.ignore(); cin.get();
				}
			}
			else if (inner_choose == 2) {
				newbook();
			}
		}
		else if (choose == 0) {
			mainlayout(account, i);
			break;  // 退出循环
		}
	}
}
void libraryout(const char* account, const int i)
{
	mid("1-还书",width);
	mid("2-返回上一级", width);
	int controlnum;
	cin >> controlnum;
	if (controlnum == 1)
	{
		mid("你借阅的图书如下", width);
		bookstulink p = studentdata[i].bookstu;
		while (p != nullptr) {
			string tf;
			if (bookdata[p->bookindex].condiction == false) tf = "未借阅";
			else tf = "已借阅";
			cout << endl << left << i + 1 << " " << setw(25) << bookdata[p->bookindex].title << setw(20) << bookdata[p->bookindex].writer
				<< setw(10) << bookdata[p->bookindex].pricing << setw(15) << bookdata[p->bookindex].bookISNnumber <<
				setw(20) << bookdata[p->bookindex].publishinghouse << setw(4) << tf << right << endl;
			p = p->next;
		}
		mid("输入你需要还的图书", width);
		char isn[14];
		for (int k = 0;k < 13;k++)
		{
			cin >> isn[k];
		}
		isn[13] = '\0';
		int b = searchbookbyisn(isn);
		if (b == -1)
		{
			mid("你输入的isn码对应的借阅书籍不存在，按任意键返回还书界面", width);
			cin.ignore();
			cin.get();
			libraryout(account, i);
			return;
		}
		else
		{
			bookdata[b].condiction = false;
			// 从学生的借阅链表中删除该书籍
			bookstulink current = studentdata[i].bookstu;
			bookstulink prev = nullptr;
			bool found = false;
			// 遍历链表寻找要删除的书籍
			while (current != nullptr && !found) {
				if (current->bookindex == b) {
					found = true;
					// 删除节点
					if (prev == nullptr) {
						// 删除的是头节点
						studentdata[i].bookstu = current->next;
					}
					else {
						// 删除的是中间或尾部节点
						prev->next = current->next;
					}
					delete current;
					studentdata[i].bookstulinkk--;
				}
				else {
					// 移动到下一个节点
					prev = current;
					current = current->next;
				}
			}
			if (!found) {
				mid("错误：该书籍不在你的借阅列表中", width);
			}
			else {
				mid("还书成功，按任意键返回还书界面", width);
			}
			cin.ignore();
			cin.get();
			libraryout(account, i);
			return;
		}
	}
	else
	{
		mainlayout(account, i);
	}
}

int main()
{
	cout << "welcome!" << endl;
	cout << "your name" << endl;
	getline(cin, name);
	welcomelayout(name);
	rollinlayout();
	return 0;
}
