#include<iostream>
using namespace std;

typedef int ElemType;

#define MAXSIZE 100

typedef struct {
	ElemType *elem;
	int length;
}Sqlist;


//顺序表的初始化
bool InitList(Sqlist& L) {
	L.elem = new ElemType[MAXSIZE];
	if (!L.elem) return false;
	L.length = 0;
	return true;
}


//顺序表的取值
bool GetElem(Sqlist L, int i, ElemType& e) {
	if (i<1 || i>L.length) return false;
	e = L.elem[i - 1];
	return true;
}


//顺序表的查找（第一个元素）
int LocateElem(Sqlist L, ElemType e)
{
	for (int i = 0;i < L.length;i++)
	{
		if (L.elem[i] == e) return i + 1;
	}
	return 0;
}


//顺序表的插入
bool ListInsert(Sqlist& L, int i, ElemType e)
{
	if (i<1 || i>L.length + 1) return false;
	for (int j = L.length - 1;j > i - 1;j--)
	{
		L.elem[j + 1] = L.elem[j];
	}
	L.elem[i - 1] = e;
	L.length++;
	return true;
}


//顺序表的删除
bool ListDelete(Sqlist& L, int i)
{
	if (i<1 || i>L.length) return false;
	for (int j = i - 1;j < L.length - 1;j++)
	{
		L.elem[j] = L.elem[j + 1];
	}
	return true;
}


int main()
{
	Sqlist L;
	if (!InitList(L)) {
		cout << "no Sqlist"; exit(0);
	}
	L.length = 10;
	for (int i = 0;i < 10;i++)
	{
		cin >> L.elem[i];
	}
	int num = 2;
	int index = LocateElem(L, num);
	cout << index << endl;
	return 0;
}